### 数据结构相关知识

## 与集合相关：常用的存储结构有：栈、队列、数组、链表、红黑树

# 1. 栈(stack)
被称为堆栈，它是受限的线性表，其限制是仅允许在标的一端进行插入和删除操作，不允许在其它任何位置进行
添加、查找、删除等操作
【先进后出】  实例：子弹被压入弹夹、网页的跳转

# 2. 队列(queue)
【先进先出】  实例：排队通过天桥

# 3.数组(array)
特点：
    查询快：数组的地址是连续的，通过数组的首地址可以找到数组，通过数组的索引可以快速查找一个元素
    增删慢：数组的长度是固定的，想要增加/删除一个元素，必须创建一个新数组，把源数组的数据复制过来
    --> 增删的时候需要反复在堆内存中创建回收数组，效率低下
ArrayList 集合
底层是用数组实现的


# 4. 链表
特点：
    查询慢：链表地址是不连续的，每次查询元素，都必须从头开始查询
    增删快：链表结构，增加/删除一个元素，对链表的整体结构没有影响，所以增删快
链表中的每一个元素也称之为节点
一个节点包含了一个数据源(存储数组)，两个指针域(存储地址)

分类：
    单向链表：链表中只有一条链子，不能保证元素的顺序(存储元素和取出元素的顺序有可能不一致)
    双向链表：链表中有两条链子，有一条链子是专门记录元素的顺序，是一个有序的集合
LinkedList 集合

# 5. 红黑树
    二叉树：分支不能超过两个
    二叉排序树/查找树：存储的元素是有大小顺序的，左子树小，右子树大
    二叉平衡树：左孩子和右孩子相等
红黑树特点：
    趋近于平衡树，查询的速度非常的快，查询叶子节点最大次数不能超过2倍
约束：
    1. 节点可以是红色的或者黑色的
    2. 根节点是黑色的
    3. 叶子节点(空节点)是黑色的
    4. 每个红色的节点都是黑色的
    5. 任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同

HashSet 集合存储数据的结构(哈希表)
jdk1.8之前：哈希表=数组+链表
jdk1.8之后：哈希表=数组+链表
            哈希表=数组+红黑树(提高查询的速度)
特点：
    速度快
具体操作：
先把元素进行分组(相同哈希值的元素是一组) 链表/红黑树结构把相同哈希值的元素连接到一起
当链表的长度超过了 8 位，那么就会把链表转换为红黑树(提高查询的速度)
