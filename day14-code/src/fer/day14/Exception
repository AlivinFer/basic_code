### 异常
指的是程序在执行过程中，出现的非正常情况，最终会导致 JVM 的非正常停止
在 Java 等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出一个异常对象
java 处理异常的方式是中断处理
# 异常指得并不是语法错误，语法错了，编译不通过，不会产生字节码文件，根本不能运行

异常机制其实是帮助找到程序中的问题，根类是 java.lang.Throwable
有两个子类：java.lang.Error 和 java.lang.Exception

Throwable 体系:
 1. Error: 严重错误 Error，无法通过处理的错误，只能事先避免，必须修改源代码。好比绝症
 2. Exception：表示异常，异常产生后程序员可以通过代码的方法纠正，使程序继续运行，是必须要处理的。好比感冒。

Throwable类中定义了3个异常处理的方法
1. String getMessage() 返回此 throwable 的简短描述
2. String toString() 返回此 throwable 的详细消息字符串
3. void printStackTrace() JVM打印异常对象，默认此方法，打印的异常信息是最全面的

// 处理异常的两种方式
1. 通过 throws 抛出异常
2. 通过 try catch

finally 代码块，和 try 一起使用
无论是否出现异常都会执行
注意：
    1. finally 不能单独使用，必须和 try 一起使用
    2. finally 一般用于资源释放(资源回收)，无论程序是否出现异常，最后都要资源释放(IO)
如果 finally 里有 return 语句，永远返回 finally 中的结果，应避免该情况

异常的注意事项：
    多个异常如何处理
        1. 多个异常分别处理
        2. 多个异常一次捕获，多次处理
            注意事项：
               catch 里边定义的异常变量，如果有子父类关系，那么子类的异常变量必须写在上边，否则就会报错
        3. 多个异常一次捕获一次处理

运行期异常被抛出可以不处理，即不捕获也不声明抛出

子父类的异常：
    如果父类抛出了多个异常，子类重写父类方法时，抛出和父类相同的异常或者是父类异常的子类或者不抛出异常
    父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常，此时子类产生该异常，只能捕获处理，不能声明抛出
注意:
    保持子类和父类异常一样