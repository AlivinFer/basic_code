### IO
I: input 输入(读取)  把硬盘中的数据，读取到内存中使用
O：output 输出(写入)  把内存中的数据，写入到硬盘中保存
流：数据(字符，字节) 1 个字符 = 2 个字节 1个字节 = 8 个二进制位

          输入流             输出流
字节流   InputStream     OutputStream
字符流   Reader          Writer

计算机一切文件数据(文本、图片、视频等)在存储时，都是以 二进制数字的形式保存，为一个一个的字节，传输时同样。

写入数据的原理(内存 --> 硬盘)
    java 程序 --> JVM --> OS --> OS 写入数据的方法 --> 把数据写入到文件中

读取数据的原理(硬盘 --> 内存)
    java 程序 --> JVM --> OS --> OS 读取数据的方法 --> 读取文件
字节输出流的使用步骤：
    1. 创建一个 FileOutputStream 对象，构造方法中传递写入数据的目的地
    2. 调用 FileOutputStream 对象中的方法 write，把数据吸入到文件中
    3. 释放资源(流使用会占用一定的内存，使用完毕要把内存清空，提高程序的效率)

换行：
    windows 上：\r\n
    Linux 上：/n
    mac：/r

文件复制(一读一写)

使用字节读取中文文件
1 个中文
    GBK：占用 2 个字节
    UTF-8：占用 3 个字节
可能会出现乱码的问题(因为一个中文字符可能占用多个字节存储)

flush 和 close 区别
    flush：刷新缓冲区，流对象可以继续使用
    close：先刷新缓冲区，然后通知系统释放资源，流对象不可以再被使用了

缓冲流(高效流)
    字节缓冲流：BufferedInputStream, BufferedOutputStream
    字符缓冲流：BufferedReader, BufferedWriter
基本原理：
    在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统 IO 次数，从而提高读写的效率

字符编码和字符集
    常见字符集：ASCII、GBK、Unicode(UTF-8、UTF-16、UTF-32)
ASCII：共 256 个字符，扩展字符集使用 8 位(bits)表示一个字符
GBK：为了显示中文而设计的一套字符集
Unicode：为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码(万国码)
    UTF-8：使用 1-4 个字节为每个字符编码，编码规则：
        1. 128 个 US-ASCII 字符，只需一个字节编码
        2. 拉丁文等字符，需要两个字节编码
        3. 大部分常用字(含中文)，使用三个字节编码
        4. 其它极少使用的 Unicode 辅助字符，使用四字节编码
