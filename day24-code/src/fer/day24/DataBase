### 数据库(DataBase)
基本概念：
    用于存储和管理数据的仓库
特点：
    1. 持久化存储数据
    2. 方便存储和管理数据
    3. 使用了统一的方式操作数据库 -- SQL

常用数据库软件：
    关系型数据库
       · Oracle
       · MySQL
       · Microsoft SQL Server

在我 Web 应用中，使用最多的就是 MySQL
    1）开源，免费
    2）功能足够强大、足以应付 web 应用开发

net start mysql 启动 mysql 的服务
net stop mysql 关闭 mysql 服务

mysql 登录
  · mysql -u root -p
    输入密码
  · mysql -h ip -u root -p (连接其他主机的 mysql)
    输入密码
  · mysql --host=ip --user=root --password
    输入密码
mysql 退出
  · exit
  · quit

MySQL 目录结构
   1. 安装目录
      配置文件 my.ini
   2. MySQL 数据目录
    basedir="C:/Program Files/MySQL/MySQL Server 8.0/"
数据库：文件夹
表：文件
数据：数据

SQL(Structured Query Language)：结构化查询语言
    定义了操作所有关系型数据库的规则，每一种数据库操作的方式存在不一样的地方，称为"方言"

SQL 通用语法
   · SQL 语句可以单行或多行书写，并以分号结尾。
   · 使用空格和缩进来增强语句的可读性。
   · MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写
   · 3 种注释
       单行注释：-- 注释内容 或 # 注释内容(mysql 特有)
       多行注释：/* 注释 */

SQL 分类
   1) DDL(Data Definition Language) 数据定义语言
    用来定义数据库对象：数据库、表、列等。关键字：create、drop、alter等
   2) DML(Data Manipulation Language) 数据操作语言
    用来对数据库中表的数据进行增删改。关键字：insert、delete、update等
   3) DQL(Data Query Language) 数据查询语言
    用来查询数据库中表的记录(数据)。关键字：select、where等
   4) DCL(Data Control Language) 数据控制语言(了解)
    用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT、REVOKE 等

DDL：操作数据库、表
    1. 操作数据库：CRUD
        · C(Create)：创建
            创建 test 数据库，判断是否存在，并指定字符集为 gbk
                create database if not exists test character set gbk;
        · R(Retrieve)：查询
            查询所有数据库的名称
                show databases;
            查询某个数据库的字符集：查询某个数据库的创建语句
                show create database 数据库名称;
        · U(Update)：修改
            修改数据库的名称
                alter database 数据库名称 character set 字符集名称;
        · D(Delete)：删除
            删除数据库
                drop database if exists 数据库名称;
        · 使用数据库
            查询当前正在使用的数据库名称
                select database();
            使用数据库
                use 数据库名称;
    2. 操作表
        C(Create)：创建
            1. 创建表
                create table 表名(
                    列名1 数据类型1,
                    列名 数据类型2,
                    .....
                    列名n 数据类型n
                );
            复制一个表：create table 表名 like 要复制的表名;
            注意事项：
                · 最后一列，不需要加逗号(,)
                · 数据库类型：
                    1. int：整数类型
                    2. double：小数类型
                    3. date：日期，只包含年月日，yyyy-MM-dd
                    4. datetime：日期，包含年月日时分秒 yyyy-MM-dd HH:mm:ss
                    5. timestamp: 时间戳类型 包含年月日时分秒 yyyy-MM-dd HH:mm:ss
                        如果将来不给这个字段赋值，或赋值为 null，则默认使用当前的系统时间，来自动赋值
                    6. varchar：字符串
                       如 name varchar(20)：姓名最大 20 个字符
        R(Retrieve)：查询
            查询某个数据库中所有的表名称
                show tables;
            查询表结构
                desc 表名;
        U(Update)：修改
            1. 修改表名
                alter table 表名 rename to 新的表名;
            2. 修改表的字符集
                alter table 表名 character set 字符集名称；
            3. 添加一列
                alter table 表名 add 列名 数据类型;
            4. 修改列的名称 类型
                alter table 表名 change 列名 新列名 新数据类型;
                alter table 表名 modify 列名 新数据类型;
            5. 删除列
                alter table 表名 drop 列名;
        D(Delete)：删除
            drop table if exists 表名;

DML：增删改表中数据
    1. 添加数据
        语法：
            insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);
        注意：
            1. 列名和值要一一对应
            2. 如果表名后，不定义列名，则默认给所有列添加值
                insert into 表名 values(值1, 值2,...值n);
            3. 除了数字类型，其他类型需要使用引号(单双都可以)引起来
    2. 删除数据
        语法：
            delete from 表名 [where 条件]
        注意：
            1. 如果不加条件，则删除表中所有记录
            2. 如果要删除所有记录
                · delete from 表名; -- 不推荐使用，有多少条记录就会执行多少次删除操作
                · TRUNCATE TABLE 表名; -- 推荐使用，效率更高，先删除表，然后再创建一张一样的表
    3. 修改数据
        语法：
            update 表名 set 列名1 = 值1, 列名2 = 值2,...[where 条件];
        注意：
            1. 如果不加任何条件，则会将表中的所有的记录全部修改

DQL：查询表中的记录
    select * from 表名;

    1.语法：
        select
            字段列表
        from
            表名列表
        where
            条件列表
        group by
            分组字段
        having
            分组之后的条件
        order by
            排序
        limit
            分页限定

    2. 基础查询
        · 多个字段的查询
            select 字段1, 字段2... from 表名;
            注意：
                如果查询所有字段，则可以使用 * 来替代字段列表
        · 去除重复
            distinct
        · 计算列
            一般可以使用四则运算计算一些列的值(主要是数值型)
            ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null
            如果该字段为 null 后的替换值
        · 起别名
            as：as 也可以省略
    3. 条件查询
        · where 子句后跟条件
        · 运算符
            >、<、<=、>=、=、!=、<>(不等于)
            between ... and
            in(集合)
            like：模糊查询
                占位符
                   · _: 单个任意字符
                   · %：多个任意字符
            is NULL
            and 或 &&
            or 或 ||
            not 或 !
    4. 排序查询
        · order by 子句
            order by 排序字段1, 排序方式, 排序字段2, 排序方式...;
        注意：
            排序方式：
                ASC：升序，默认的
                DESC：降序
                如果有多个排序条件，则当前面的条件值一样时，才会判断第二条件

    5. 聚合函数
        将一列数据作为一个整体，进行纵向的计算。
           · count：计算个数
               1. 一般选择非空的列：主键
               2. count(*)
           · max：计算最大值
           · min：计算最小值
           · sum：计算和
           · avg：计算平均值
        注意：
            1. 聚合函数的计算，排除 null 值
            2. 解决方案
                · 选择不包含非空的列计算
                · IFNULL 函数

    6. 分组查询
        语法：group by 分组字段
    注意：
        1. 分组之后查询的字段：分组字段、聚合函数(添加其它字段无意义)
        2. where 和 having 的区别
            · where 在分组之前进行限定，如果不满足条件，则不参与分组，having 在分组之后进行限定，如果不满足结果，则不会被查询出来
            · where 后面不能添加聚合函数，having 可以

    7. 分页查询
      语法：limit 开始的索引, 每页查询的字数
      公式：开始的索引 = (当前的页码 - 1) * 每页显示的条数
      注意：
        分页操作是一个 MySQL "方言" (每个数据库的操作方式不同)

    8. 约束
       对表中的数据进行限定，保证数据的正确性、有效性和完整性
       分类：
         · 主键约束：primary key
            注意：
                1. 含义：非空且唯一
                2. 一张表只能有一个字段为主键
                3. 主键就是表中记录的唯一标识
                4. 删除主键
                   -- 错误 alter table stu modify id int;
                   alter table stu drop primary key;
         · 非空约束: not null
         · 唯一约束：unique 某一列的值不能重复
            注意：
                1. 唯一约束可以有 NULL 值，但是只能有一条记录为 null 值
                2. 在创建表时，添加唯一约束
                3. 在表创建完后，添加唯一约束
         · 外键约束：foreign key
            1. 在创建表时添加外键
            语法：
                create table(
                        ....
                        外键列
                        constraint 外键名称 foreign key (外键字段名称) references 主表名称(主表列名称)
                );
            2. 删除外键
                alter table 表名 drop foreign key 外键名称;
            3. 创建表之后，添加外键
                alter table 表名 add constraint 外键名称 foreign key (外键字段名称) references 主表名称(主表列名称)
         · 自动增长
            概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值的自动增长。

    9. 级联操作
        · 添加级联操作
            语法：alter table 表名 add constraint 外键名称 foreign key (外键字段名称) references 主表名称(主表列名称) on update cascade on delete cascade;
        · 分类
            1. 级联更新：on update cascade
            2. 级联删除：on delete cascade

数据库的设计

    1. 多表之间的关系
        分类：
            · 一对一(了解)：如 人和身份证
            · 一对多(多对一)：如 部门和员工
            · 多对多：如 学生和课程
        实现关系：
            一对多(多对一)
                · 在多的一方建立外键，指向一的一方的主键
            多对多
                · 需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键
            一对一
                · 可以在任意一方建立外键，指向一方的主键

    2. 数据库设计的范式
        目前总共有六种范式，常用的有三种，越高的范式数据库冗余越小。
        分类：
            1. 第一范式(1NF):每一列都是不可分割的原子数据项
            2. 第二范式(2NF):在 1NF 的基础上，非码属性必须完全依赖于候选码(在 1NF 基础上消除非主属性对主码的部分函数依赖)
            3. 第三范式(3NF):在 2NF 的基础上，任何非主属性不依赖于其它非主属性(在 2NF 基础上消除传递依赖)

数据库备份与还原
    1. 命令行
        语法：
            · 备份：mysql dump -u 用户名 -p 密码 数据库名称 > 保存的路径
            · 还原：
                1. 登录数据库 mysql -u 用户名 -p 密码
                2. 创建数据库 create database 数据库名;
                3. 使用数据库 use 数据库名
                4. 执行文件 source 文件路径
    2. 图形化

多表查询
    笛卡尔积
        有两个集合 A, B, 取这两个集合的所有组成情况。
    多表查询的分类
        1. 内连接查询
            · 隐式内连接：使用 where 条件消除无用数据
            · 显式内连接
                语法：select 字段列表 from 表名1 [inner] join 表名2 on 条件
        注意事项：
            · 从哪些表中查询数据
            · 条件是什么
            · 查询哪些字段
        2. 外连接查询
            · 左外连接
                语法：select 字段列表 from 表1 left [outer] join 表2 on 条件
                    查询的是左表所有数据以及其交集部分
            · 右外连接
                语法：select 字段列表 from 表1 right [outer] join 表2 on 条件;
                    查询的是右表所有数据以及其交集部分
        3. 子查询
            查询中嵌套查询，称嵌套查询为子查询
            几种情况：
                1. 子查询的结果是单行单列的
                    子查询可以作为条件，使用运算符去判断。 运算符：> >= < <= =
                2. 子查询的结果是多行单列的
                    子查询可以作为条件，使用运算符 in 来判断
                3. 子查询的结果多行多列的
                    子查询作为新表使用

事务
    事务的基本介绍
        1. 概念
            如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败
            可确保安全
        2. 操作
            1. 开启事务：start transaction
            2. 回滚：rollback
            3. 提交：commit
            4. mysql 数据库中事务默认自动提交
                事务提交的两种方式
                    · 自动提交
                        mysql 默认自动提交(Oracle 默认手动提交)
                        一条 DML 语句会自动提交一次事务
                    · 手动提交
                        需要先开启事务，再提交
                修改事务的默认提交方式
                    查看事务的默认提交方式：select @@autocommit;  -- 1 代表自动提交  0 代表手动提交
                    修改默认提交方式：set @@autocommit = 0；
        3. 事务的四大特征
            · 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败
            · 持久性：当事务提交或回滚后，数据库会持久化的保存数据
            · 隔离性：多个事务之间，相互独立。
            · 一致性：事务操作前后，数据总量不变
        4. 事务的隔离级别(了解)
            概念：多个事务之间隔离的，相互独立的。如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题
            存在问题：
                · 脏读：一个事务，读取到另一个事务中没有提交的数据
                · 不可重复读(虚读)：在同一个事务中，两次读取的数据不一样
                · 幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改
            隔离级别：
                · read uncommitted：读未提交
                    解决的问题：脏读、不可重复读、幻读
                · read committed：读已提交（Oracle 默认）
                    解决的问题：不可重复读、幻读
                · repeatable read：可重复读 (mysql 默认)
                    解决的问题：幻读
                · serializable：串行化
                    可以解决所有的问题
            注意：隔离级别从小到大安全性越来越高，但是效率越来越低

DCL：管理用户，授权
    1. 管理用户
        · 添加用户
            语法：create user "用户名"@"主机名" identified by "密码";
        · 删除用户
            语法：drop user "用户名"@"主机名";
        · 修改用户密码
            · update user set password  = password("新密码") where user = "用户名";
            · set password for "用户名"@"主机名" = password("新密码");
            注意：
                mysql 中忘掉 root 用户的密码
                    1. cmd(需要管理员权限) -->  net stop mysql  停止 mysql 服务
                    2. 使用无验证方式启动 mysql 服务：mysqld --skip-grant-tables
                    3. 打开新的 cmd 窗口，直接输入 mysql 命令，就可以登录成功
                    4. use mysql
                    5. update user set password = password("新密码") where user = "root";
                    6. 关闭两个窗口
                    7. 打开任务管理器，手动结束 mysqld.exe 进程
                    8. 启动 mysql 服务
                    9. 使用新密码登录
        · 查询用户
            切换到数据库
                use mysql;
            查询 user 表
                select * from user;
        注意：通配符 % 表示可以在任意主机使用用户登录数据库

    2. 权限管理
        1. 查询权限
            show grants for "用户名"@"主机名";
        2. 授予权限
            grant 权限列表 on 数据库名.表名 to "用户名"@"主机名";
        3. 撤销权限
            revoke 权限列表 on 数据库名.表名 from "用户名"@"主机名";
