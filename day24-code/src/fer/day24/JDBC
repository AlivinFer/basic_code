### JDBC
1. 概念：Java DataBase Connectivity Java 数据库连接，Java 语言操作数据库
JDBC 本质：由官方(sun 公司)定义的一套操作所有关系型数据库的规则，即接口。
          各个数据库厂商去实现这套接口，提供数据库驱动 jar 包，我们可以使用这套接口(JDBC)编程，真正执行的
          代码是驱动 jar 包中的实现类。
2. 快速入门
    步骤：
        · 导入驱动 jar 包
        · 注册驱动
        · 获取数据库连接对象 Connection
        · 定义 sql
        · 获取执行 sql 语句的对象 Statement
        · 执行 sql，接受返回结果
        · 处理结果
        · 释放资源
3. 详解各个对象
    · DriverManager：驱动管理对象
        功能：
            1. 注册驱动：告诉程序该使用哪一个数据库驱动 jar
                (可省略，因为在 com.mysql.META-INF.services.java.sql.Driver 中已经引入)
                static void registerDriver(Driver driver)
                    向 DriverManager 注册给定驱动程序
                写代码使用：class.forName("com.mysql.jc.jdbc.Driver");
            2. 获取数据库连接
                static Connection getConnection(String url, String user, String password)
                    建立到给定数据库 URL 的连接
            参数：
                · url：指定连接路径
                    语法(mysql)：jdbc:mysql://ip地址(域名):端口号/数据库名称
                             eg：jdbc:mysql://localhost:3306/test
                    如果连接的是本地的 mysql 服务器，则可以简写为 jdbc:mysql:///数据库名称
                · user：用户名
                · password：密码
    · Connection：数据库连接对象
        功能：
            1. 获取执行 sql 的对象
                Statement createStatement()
                PreparedStatement prepareStatement(String sql)
            2. 管理事务：
                · 开启事务
                    void setAutoCommit(boolean autoCommit)
                        将此连接的自动提交模式设置为给定状态，调用该方法设置参数为 false，即开启事务
                · 提交事务
                    void commit()
                        使所有上一次提交/回滚后进行的更改成为持久更改，并释放此 Connection 对象当前持有的所有数据库锁。
                · 回滚事务
                     void rollback()
                        取消在当前事务中进行的所有更改，并释放此 Connection 对象当前持有的所有数据库锁
    · Statement：执行 sql 对象
        方法：
            · boolean execute(String sql)
                执行给定的 SQL 语句，该语句可能返回多个结果 (可以执行任意的 sql)
            · int executeUpdate(String sql)
                执行给定 SQL 语句，该语句可能为 INSERT、UPDATE 或 DELETE 语句
                或者不返回任何内容的 SQL 语句（如 SQL DDL(create、alter、drop) 语句）
                返回值：影响的行数，可以通过这个影响的行数判断 DML 语句是否执行成功 返回值 > 0 的则执行成功，反之，则失败
            ·  ResultSet executeQuery(String sql)
                执行给定的 SQL 语句（DQL），该语句返回单个 ResultSet 对象
    · ResultSet：结果集对象
        boolean next()：游标向下移动一行,判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回 false，如果不是则返回 true
        getXxx()：获取数据
            Xxx：代表数据类型 如 int getInt(), String getString()
            参数：
                1. int：代表列的编号，从 1 开始 如：getString(1)
                2. String：代表列名称 如 getDouble("name")
        注意：
            使用步骤：
                1. 游标向下移动一行
                2. 判断是否有数据
                3. 获取数据
    · PrepareStatement：执行 sql 的对象
        1. SQL 注入问题：在拼接 sql 时，有一些 sql 的特殊关键字参与字符串的拼接，会造成安全性问题
            · 输入用户名随便，输入密码：a' or 'a' = 'a
        2. 解决 sql 注入问题：使用 PrepareStatement 对象来解决
        3. 预编译的 sql，参数使用 ? 作为占位符
        4. 步骤：
               · 导入驱动 jar 包 mysql-connector-java-8.0.23-bin.jar
               · 注册驱动
               · 获取数据库连接对象 Connection
               · 定义 sql
                    注意：sql 的参数使用 ? 作为占位符。如 select * from user where username = ? and password = ?;
               · 获取执行 sql 语句的对象 PrepareStatement ConnectionStatement(String sql)
               · 给 ? 赋值：
                    方法：setXxx(参数1, 参数2)
                        参数1：? 的位置编号从 1 开始
                        参数2：? 的值
               · 执行 sql，接受返回结果
               · 处理结果
               · 释放资源

### 抽取 JDBC 工具类：JDBCUtils
目的：简化书写
分析：
    1. 注册驱动也抽取
    2. 抽取一个方法获取连接对象
        需求：不想传递参数(麻烦)，还得保证工具类的通用性。
        解决：配置文件
            jdbc.properties
                url =
                user =
                password =
    3. 抽取一个方法释放资源

